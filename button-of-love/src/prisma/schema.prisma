generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(uuid())
  first_name            String
  last_name             String
  username              String   @unique
  email                 String   @unique
  birthdate             DateTime
  password              String
  memberships           RelationMember[] @relation("RelationMemberUserId")
  love_counters         LoveCounter[] @relation("LoveCountersFromUser")
  sent_invitations      RelationInvitation[] @relation("InvitationInviter")
  received_invitations  RelationInvitation[] @relation("InvitationInvited")
}

model Relation {
  id          String @id @default(uuid())
  created_at  DateTime @default(now())
  members     RelationMember[] @relation("RelationMemberRelationId")
  love_counters LoveCounter[] @relation("LoveCounterRelationId") // one per member
  relation_invitation_id String? @unique
  relation_invitation RelationInvitation? @relation("RelationRelationInvitationId", fields: [relation_invitation_id], references: [id])
}

model RelationMember {
  relation_id String
  user_id String

  user User @relation("RelationMemberUserId", fields: [user_id], references: [id])
  relation Relation @relation("RelationMemberRelationId", fields: [relation_id], references: [id])

  @@id([relation_id, user_id])
}

model RelationInvitation {
  id              String   @id @default(uuid())
  inviter_id      String
  invited_user_id String
  status          String   @default("pending") // pending, accepted, declined
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  inviter         User     @relation("InvitationInviter", fields: [inviter_id], references: [id])
  invited_user    User     @relation("InvitationInvited", fields: [invited_user_id], references: [id])
  relation        Relation? @relation("RelationRelationInvitationId")

  @@unique([inviter_id, invited_user_id]) // Prevent duplicate invitations between same users
}

model LoveCounter {
  relation_id String
  from_user_id     String
  count       Int      @default(0)
  last_loveu_sent   DateTime

  relation    Relation @relation("LoveCounterRelationId", fields: [relation_id], references: [id])
  user        User     @relation("LoveCountersFromUser", fields: [from_user_id], references: [id])

  @@id([relation_id, from_user_id])
}
